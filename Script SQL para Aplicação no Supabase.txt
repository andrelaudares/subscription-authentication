-- Habilitar a extensão uuid-ossp se não estiver habilitada
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Criar a tabela users no schema public
-- O id é uma chave estrangeira que referencia auth.users(id)
CREATE TABLE public.users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,  -- Chave primária e estrangeira para auth.users(id)
  email TEXT UNIQUE NOT NULL,                      -- Email único
  username TEXT UNIQUE NOT NULL,                   -- Username único
  name TEXT NOT NULL,                              -- Nome completo
  cpf_cnpj TEXT UNIQUE NOT NULL,                   -- CPF ou CNPJ único
  asaas_customer_id TEXT,                          -- ID do cliente no Asaas
  address TEXT,                                    -- Endereço (opcional)
  phone TEXT,                                      -- Telefone (opcional)
  description TEXT,                                -- Descrição (opcional)
  created_at TIMESTAMP DEFAULT NOW(),              -- Data de criação
  updated_at TIMESTAMP DEFAULT NOW()               -- Data de atualização
);

-- Criar a tabela subscriptions
CREATE TABLE public.subscriptions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),  -- UUID gerado automaticamente
  user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,  -- Chave estrangeira para users.id
  subscription_id TEXT NOT NULL,                   -- ID da assinatura no Asaas
  status TEXT NOT NULL,                            -- Status da assinatura
  plan TEXT NOT NULL,                              -- Plano da assinatura
  created_at TIMESTAMP DEFAULT NOW(),              -- Data de criação
  updated_at TIMESTAMP DEFAULT NOW()               -- Data de atualização
);

-- Criar índices para melhorar a performance
CREATE UNIQUE INDEX idx_users_email ON public.users (email);
CREATE UNIQUE INDEX idx_users_username ON public.users (username);
CREATE UNIQUE INDEX idx_users_cpf_cnpj ON public.users (cpf_cnpj);
CREATE INDEX idx_subscriptions_user_id ON public.subscriptions (user_id);
CREATE INDEX idx_subscriptions_subscription_id ON public.subscriptions (subscription_id);

-- Habilitar Row Level Security (RLS) para a tabela users
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Política RLS para permitir que usuários leiam seus próprios dados
CREATE POLICY "Usuários podem ver seus próprios dados"
ON public.users
FOR SELECT
USING (auth.uid() = id);

-- Política RLS para permitir que usuários atualizem seus próprios dados
CREATE POLICY "Usuários podem atualizar seus próprios dados"
ON public.users
FOR UPDATE
USING (auth.uid() = id);

-- Habilitar Row Level Security (RLS) para a tabela subscriptions
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;

-- Política RLS para permitir que usuários leiam suas próprias assinaturas
CREATE POLICY "Usuários podem ver suas próprias assinaturas"
ON public.subscriptions
FOR SELECT
USING (auth.uid() = user_id);

-- Política RLS para permitir que usuários criem suas próprias assinaturas
CREATE POLICY "Usuários podem criar suas próprias assinaturas"
ON public.subscriptions
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Política RLS para permitir que usuários atualizem suas próprias assinaturas
CREATE POLICY "Usuários podem atualizar suas próprias assinaturas"
ON public.subscriptions
FOR UPDATE
USING (auth.uid() = user_id);

-- Função para atualizar o campo updated_at automaticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para a tabela users
CREATE TRIGGER update_users_updated_at
BEFORE UPDATE ON public.users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Trigger para a tabela subscriptions
CREATE TRIGGER update_subscriptions_updated_at
BEFORE UPDATE ON public.subscriptions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();


CREATE OR REPLACE FUNCTION public.insert_new_user(
  user_id UUID,
  user_email TEXT,
  user_username TEXT,
  user_name TEXT,
  user_cpf_cnpj TEXT,
  user_asaas_id TEXT,
  user_address TEXT,
  user_phone TEXT,
  user_description TEXT
) RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER -- Isso faz a função executar com as permissões do CRIADOR
AS $$
BEGIN
  INSERT INTO public.users (
    id, 
    email, 
    username, 
    name, 
    cpf_cnpj, 
    asaas_customer_id, 
    address, 
    phone, 
    description
  ) VALUES (
    user_id,
    user_email,
    user_username,
    user_name,
    user_cpf_cnpj,
    user_asaas_id,
    user_address,
    user_phone,
    user_description
  );
  
  RETURN jsonb_build_object(
    'success', true,
    'user_id', user_id
  );
EXCEPTION
  WHEN others THEN
    RETURN jsonb_build_object(
      'success', false,
      'error', SQLERRM
    );
END;
$$;

-- Garante que todos podem executar esta função
GRANT EXECUTE ON FUNCTION public.insert_new_user TO service_role;
GRANT EXECUTE ON FUNCTION public.insert_new_user TO authenticated;
GRANT EXECUTE ON FUNCTION public.insert_new_user TO anon;

CREATE POLICY "Allow service_role full access to users"
ON public.users
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);